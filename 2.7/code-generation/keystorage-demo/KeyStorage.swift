//
//  KeyStorage.swift
//  radare-demo
//
//  Created by Mikhail Rakhmalevich on 28.04.2021.
//


import Foundation

final class KeyStorage {
    static var secretKey: String {
        let encoded: [UInt8] = [0xb0, 0x23, 0xb2, 0xb7, 0x6e, 0x18, 0xa7, 0x6d, 0x97, 0xa9, 0x08, 0xbb, 0x5c, 0x0d, 0x48, 0x73, 0x4b, 0x06, ]
        return decode(encoded: encoded)
    }
}

private extension KeyStorage {
    static func decode(encoded: [UInt8]) -> String {
        let cipher: [UInt8] = [
                0xc4, 0x4b, 0xdb, 0xc4, 0x31, 0x71, 0xd4, 0x32, 
                0xe4, 0xcc, 0x6b, 0xc9, 0x39, 0x79, 0x17, 0x18, 
                0x2e, 0x7f, 0xf3, 0xf4, 0x27, 0x16, 0x61, 0x58, 
                0xf7, 0x0c, 0x22, 0xe9, 0xc4, 0xa3, 0x19, 0x4a, 
                0x71, 0xca, 0x4c, 0x33, 0x2e, 0x17, 0x4c, 0x05, 
                0x17, 0xdd, 0x56, 0xdb, 0x83, 0x4a, 0x65, 0x16, 
                0x3b, 0xe4, 0xa0, 0xcb, 0x70, 0x25, 0x09, 0x47, 
                0xaa, 0xa9, 0x46, 0x6a, 0x24, 0xe1, 0xf3, 0x77, 
        ]
        
        let result = String(decoding: encoded.enumerated().map { (offset, element) in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
        
        return result
    }
}

